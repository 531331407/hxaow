#
# by ydz 2017/01/04 自动升级工具配置文件
# 基于flyway 4.0.3
#

#指定本次升级版本,默认为update 下的所有版本，可以指定某个版本
#update_dir=CZYTH2016.12.30.00

# 添加数据库地址
flyway.url=jdbc:oracle:thin:@localhost:1521:orcl

# 用户名 可缺省，执行时再录入
#flyway.user=
# 密码
#flyway.password=

# 常态库用户名(项目库使用)
#pm_db.user=

# 常态库密码(项目使用)
#pm_db.password=

# 是否自动发布升级包到domain 目录 默认为true
#flyway.autoDeploy = false;

# 升级服务domain路径，多个服务用分号隔开（;） , 此处不启用，需在运行时指定. 结合flyway.autoDeploy 使用
#domain.path=D:\bea103\user_projects\domains\domain_8001\servers;D:\bea\user_projects\domains\mydomain7003\applications

# DLL客户端，服务器升级目录（DLL 需要放置的目录，需要注意多年度客户端,如：2017update）,web端无DLL不启用此参数
#domain.dll.path=D:\bea103\user_projects\domains\domain_8001\servers\realware\update


# 服务升级jdk版本 目前支持： jdk1.4 和 jdk1.6。 默认jdk1.6
#server.jdk = jdk1.4

# Comma-separated list of directories containing JDBC drivers and Java-based migrations. (default: <INSTALL-DIR>/jars)
#flyway.jarDirs=


# Encoding of Sql migrations (default: UTF-8)
# flyway.encoding=

# Whether placeholders should be replaced. (default: true)
# flyway.placeholderReplacement=

# Placeholders to replace in Sql migrations
# flyway.placeholders.user=
# flyway.placeholders.my_other_placeholder=

# Prefix of every placeholder (default: ${ )
# flyway.placeholderPrefix=

# Suffix of every placeholder (default: } )
# flyway.placeholderSuffix=

# Target version up to which Flyway should consider migrations.
# The special value 'current' designates the current version of the schema. (default: <<latest version>>)
# 希望升级到的数据库版本
# flyway.target=


# Allows migrations to be run "out of order" (default: false).
# If you already have versions 1 and 3 applied, and now a version 2 is found,
# it will be applied too instead of being ignored.
# flyway.outOfOrder=

# This allows you to tie in custom code and logic to the Flyway lifecycle notifications (default: empty).
# Set this to a comma-separated list of fully qualified FlywayCallback class name implementations
# flyway.callbacks=

# If set to true, default built-in callbacks (sql) are skipped and only custom callback as
# defined by 'flyway.callbacks' are used. (default: false)
# flyway.skipDefaultCallbacks=

# Ignore future migrations when reading the metadata table. These are migrations that were performed by a
# newer deployment of the application that are not yet available in this version. For example: we have migrations
# available on the classpath up to version 3.0. The metadata table indicates that a migration to version 4.0
# (unknown to us) has already been applied. Instead of bombing out (fail fast) with an exception, a
# warning is logged and Flyway continues normally. This is useful for situations where one must be able to redeploy
# an older version of the application after the database has been migrated by a newer one.
# true to continue normally and log a warning, false to fail fast with an exception. (default: true)
# flyway.ignoreFutureMigrations=
